function [xp,xm,Pp,Pm,Qp,Qm] = sbp_staggered_6th(n,h,x)
% [xp,xm,Pp,Pm,Qp,Qm] = sbp_staggered_6th(n,h,x)
% n : Specifies the number of grid points, n+1 (x+ grid) and n+2 (x- grid)
% h : Specifies the grid spacing

assert(n >= 11,'Not enough grid points');  

% Unknown coefficients that have been selected by optimizing for accuracy
if nargin < 2 || isempty(x)

% Option 1: performs well on coarse grids but does not converge at the expected rate
x =[...
   0.476981062613060;
   0.042378648270085;
   0.070247632686187;
  -0.863191007260508;
  -0.028604533224177;
  -1.222709371508907;
   0.967618780932577];

% Option 2: converges at the expected rate (values used in paper)  
x = [...
     0.437206077683730;
     0.055814808223239;
    -0.817764481934664;
    -0.625019500752439;
     0.291851828712559;
    -1.061771802954627;
     1.043879598662207;];
end

pm6  = x(7);
qm01 = x(1);
qm05 = x(2);
qm62 = x(5);
qm65 = x(6);
qm52 = x(3);
qm54 = x(4);

% Make sure that the quadratures are positive
pm6 = max(min(pm6,1.043879598662207),0.966822742474916);

% Coefficients determined such that the SBP property is satisfied
qm44 = -135615*pm6/2552 - 5*qm01/64 - 75*qm05/64 - 4*qm54 - 5*qm62/3 + 100*qm65/3 + 5923326643/66147840;
qp44 = 135615*pm6/2552 + 5*qm01/64 + 75*qm05/64 + 4*qm54 + 5*qm62/3 - 100*qm65/3 - 5923326643/66147840;
qm31 = 1097185*pm6/15312 - 21*qm01/16 - 9*qm52/2 + 3*qm54 - 40*qm62/3 - 100*qm65/3 - 15174732737/141115392;
pm4 = 3550*pm6/319 - 4049149/408320;
qp54 = -147497*pm6/7656 - 5*qm05/16 + qm52/5 - 6*qm54/5 + 10*qm65 + 157845905851/5291827200;
pp3 = -2560*pm6/319 + 1658089/172260;
qm43 = 33705*pm6/638 + 5*qm01/16 + 25*qm05/16 + 2*qm52 + 4*qm54 + 20*qm62/3 - 100*qm65/3 - 47274594871/529182720;
qm11 = 111009*pm6/10208 - 35*qm01/16 - 3*qm52/4 + qm54/2 - 8*qm62/3 - 20*qm65/3 - 70355831813/4233461760;
pp0 = 256*pm6/319 - 180029/344520;
qp00 = 832*pm6/957 + qm01/4 - qm05/4 - 6474617/4134240;
qm53 = 26085*pm6/5104 - qm52/2 - qm54 - 2616226357/423346176;
qm04 = 192*pm6/319 - qm01/4 - 15*qm05/4 - 180029/459360;
qm23 = 560785*pm6/7656 + 35*qm01/16 + 175*qm05/16 + 2*qm52 + 4*qm54 + 10*qm62 - 50*qm65 - 7580691871/58798080;
qm12 = -5360*pm6/957 + 105*qm01/32 + 175*qm05/32 + qm52 + 4*qm62 + 31027163/8268480;
qp10 = -qm01;
qp55 = 36963*pm6/10208 - qm52/20 + 3*qm54/10 - 10379588419/2351923200;
qp53 = 167721*pm6/5104 + 21*qm05/16 - 3*qm52/10 + 9*qm54/5 - 20*qm65 - 64345739017/1175961600;
qp52 = -5385*pm6/232 - 35*qm05/16 + qm52/5 - 6*qm54/5 + 15*qm65 + 2128144969/53452800;
qp24 = -1040*pm6/957 + 15*qm01/32 + 25*qm05/32 + 4*qm52 + 10*qm62 + 420203/516780;
qp32 = -560785*pm6/7656 - 35*qm01/16 - 175*qm05/16 - 2*qm52 - 4*qm54 - 10*qm62 + 50*qm65 + 7580691871/58798080;
qp25 = -qm52;
pm0 = 256*pm6/319 - 180029/344520;
pp2 = 2560*pm6/319 - 5345191/689040;
pp4 = 1280*pm6/319 - 2260607/689040;
pm2 = 2435*pm6/319 - 22412429/3674880;
qp16 = -103*pm6/24 + 2*qm62/3 + 5*qm65/3 + 1199/192;
qp41 = -2217*pm6/116 - 35*qm01/64 - 525*qm05/64 - qm54 - 2*qm62/3 + 40*qm65/3 + 206150279/6013440;
qp51 = 183593*pm6/30624 + 35*qm05/16 - qm52/20 + 3*qm54/10 - 4*qm65 - 221210574811/21167308800;
qm42 = 1040*pm6/957 - 15*qm01/32 - 25*qm05/32 - 4*qm52 - 10*qm62 - 420203/516780;
pp1 = -1280*pm6/319 + 7693669/1378080;
qp20 = -768*pm6/319 + 3*qm01/2 + 5*qm05/2 + 180029/114840;
qp36 = 53*pm6/8 + 2*qm62/3 - 10*qm65/3 - 6737/640;
qm40 = 33831*pm6/2552 - 5*qm01/64 + 5*qm05/64 - 4*qm52/5 + 4*qm54/5 - 5*qm62/3 - 20*qm65/3 - 13372375873/661478400;
qp21 = 5360*pm6/957 - 105*qm01/32 - 175*qm05/32 - qm52 - 4*qm62 - 31027163/8268480;
qp05 = -111*pm6/116 - qm52/5 + qm54/5 + 284521447/240537600;
qm33 = -270637*pm6/2552 - 21*qm01/16 - 105*qm05/16 - 3*qm52 - 6*qm54 - 40*qm62/3 + 200*qm65/3 + 63517939447/352788480;
qp15 = 24975*pm6/10208 + 3*qm52/4 - qm54/2 - 1415817059/470384640;
qp42 = 390045*pm6/5104 + 35*qm01/64 + 525*qm05/64 + 4*qm54 + 5*qm62/2 - 50*qm65 - 2906740139/22049280;
qp43 = -404621*pm6/3828 - 21*qm01/64 - 315*qm05/64 - 6*qm54 - 10*qm62/3 + 200*qm65/3 + 3940446109/22049280;
qp13 = -1097185*pm6/15312 + 21*qm01/16 + 9*qm52/2 - 3*qm54 + 40*qm62/3 + 100*qm65/3 + 15174732737/141115392;
qp23 = 3888*pm6/319 - 63*qm01/32 - 105*qm05/32 - 6*qm52 - 20*qm62 - 1100899/102080;
qm50 = 111*pm6/116 + qm52/5 - qm54/5 - 284521447/240537600;
qm60 = -29*pm6/16 + qm62/6 + 2*qm65/3 + 83/32;
qm63 = -53*pm6/8 - 2*qm62/3 + 10*qm65/3 + 6737/640;
qp31 = 83571*pm6/5104 + 35*qm01/16 + 175*qm05/16 + qm52/2 + qm54 + 8*qm62/3 - 40*qm65/3 - 68745286903/2116730880;
qp26 = -qm62;
qp30 = 2048*pm6/957 - qm01 - 5*qm05 - 180029/129195;
qp06 = 29*pm6/16 - qm62/6 - 2*qm65/3 - 83/32;
qm34 = 404621*pm6/3828 + 21*qm01/64 + 315*qm05/64 + 6*qm54 + 10*qm62/3 - 200*qm65/3 - 3940446109/22049280;
qm35 = -167721*pm6/5104 - 21*qm05/16 + 3*qm52/10 - 9*qm54/5 + 20*qm65 + 64345739017/1175961600;
qm25 = 5385*pm6/232 + 35*qm05/16 - qm52/5 + 6*qm54/5 - 15*qm65 - 2128144969/53452800;
qm14 = 2217*pm6/116 + 35*qm01/64 + 525*qm05/64 + qm54 + 2*qm62/3 - 40*qm65/3 - 206150279/6013440;
qp56 = -qm65;
qm24 = -390045*pm6/5104 - 35*qm01/64 - 525*qm05/64 - 4*qm54 - 5*qm62/2 + 50*qm65 + 2906740139/22049280;
qp11 = -111009*pm6/10208 + 35*qm01/16 + 3*qm52/4 - qm54/2 + 8*qm62/3 + 20*qm65/3 + 70355831813/4233461760;
qm13 = -83571*pm6/5104 - 35*qm01/16 - 175*qm05/16 - qm52/2 - qm54 - 8*qm62/3 + 40*qm65/3 + 68745286903/2116730880;
qp46 = -199*pm6/48 - qm62/6 + 10*qm65/3 + 3067/384;
qp33 = 270637*pm6/2552 + 21*qm01/16 + 105*qm05/16 + 3*qm52 + 6*qm54 + 40*qm62/3 - 200*qm65/3 - 63517939447/352788480;
qm64 = 199*pm6/48 + qm62/6 - 10*qm65/3 - 3067/384;
qm00 = -832*pm6/957 - qm01/4 + qm05/4 + 2340377/4134240;
qm61 = 103*pm6/24 - 2*qm62/3 - 5*qm65/3 - 1199/192;
qp12 = 5925*pm6/116 - 35*qm01/16 - 3*qm52 + 2*qm54 - 10*qm62 - 25*qm65 - 2461411397/32071680;
qm45 = 147497*pm6/7656 + 5*qm05/16 - qm52/5 + 6*qm54/5 - 10*qm65 - 157845905851/5291827200;
qp35 = -26085*pm6/5104 + qm52/2 + qm54 + 2616226357/423346176;
qp45 = -qm54;
qp22 = -4560*pm6/319 + 105*qm01/32 + 175*qm05/32 + 4*qm52 + 15*qm62 + 5584147/459360;
qp02 = -256375*pm6/15312 + 35*qm01/64 - 35*qm05/64 + 4*qm52/5 - 4*qm54/5 + 5*qm62/2 + 10*qm65 + 678113519/24499200;
qm30 = -33505*pm6/1276 + 21*qm01/64 - 21*qm05/64 + 6*qm52/5 - 6*qm54/5 + 10*qm62/3 + 40*qm65/3 + 17947001863/440985600;
pm5 = -1665*pm6/319 + 272469511/44098560;
pp5 = -256*pm6/319 + 2552771/1378080;
qm51 = -24975*pm6/10208 - 3*qm52/4 + qm54/2 + 1415817059/470384640;
qp03 = 33505*pm6/1276 - 21*qm01/64 + 21*qm05/64 - 6*qm52/5 + 6*qm54/5 - 10*qm62/3 - 40*qm65/3 - 17947001863/440985600;
qm21 = -5925*pm6/116 + 35*qm01/16 + 3*qm52 - 2*qm54 + 10*qm62 + 25*qm65 + 2461411397/32071680;
qp40 = -192*pm6/319 + qm01/4 + 15*qm05/4 + 180029/459360;
qm10 = -117*pm6/58 + 35*qm01/64 - 35*qm05/64 + qm52/5 - qm54/5 + 2*qm62/3 + 8*qm65/3 + 1015172273/240537600;
pm3 = -3946*pm6/319 + 31642069/2449920;
qm20 = 256375*pm6/15312 - 35*qm01/64 + 35*qm05/64 - 4*qm52/5 + 4*qm54/5 - 5*qm62/2 - 10*qm65 - 678113519/24499200;
qm03 = -2048*pm6/957 + qm01 + 5*qm05 + 180029/129195;
qp01 = 117*pm6/58 - 35*qm01/64 + 35*qm05/64 - qm52/5 + qm54/5 - 2*qm62/3 - 8*qm65/3 - 1015172273/240537600;
qp50 = -qm05;
qm02 = 768*pm6/319 - 3*qm01/2 - 5*qm05/2 - 180029/114840;
qm22 = 4560*pm6/319 - 105*qm01/32 - 175*qm05/32 - 4*qm52 - 15*qm62 - 5584147/459360;
qm15 = -183593*pm6/30624 - 35*qm05/16 + qm52/20 - 3*qm54/10 + 4*qm65 + 221210574811/21167308800;
qp04 = -33831*pm6/2552 + 5*qm01/64 - 5*qm05/64 + 4*qm52/5 - 4*qm54/5 + 5*qm62/3 + 20*qm65/3 + 13372375873/661478400;
qm32 = -3888*pm6/319 + 63*qm01/32 + 105*qm05/32 + 6*qm52 + 20*qm62 + 1100899/102080;
qm41 = -7725*pm6/232 + 5*qm01/16 + 3*qm52 - 2*qm54 + 20*qm62/3 + 50*qm65/3 + 4872414607/96215040;
qp14 = 7725*pm6/232 - 5*qm01/16 - 3*qm52 + 2*qm54 - 20*qm62/3 - 50*qm65/3 - 4872414607/96215040;
pm1 = -949*pm6/319 + 16873951/4899840;
qm55 = -36963*pm6/10208 + qm52/20 - 3*qm54/10 + 10379588419/2351923200;
qp34 = -33705*pm6/638 - 5*qm01/16 - 25*qm05/16 - 2*qm52 - 4*qm54 - 20*qm62/3 + 100*qm65/3 + 47274594871/529182720;



% Number of coefficients
b = 6;

% Q+ and Q-, top-left corner
QpL = [...
qp00, qp01, qp02, qp03, qp04, qp05, qp06;
 qp10, qp11, qp12, qp13, qp14, qp15, qp16;
 qp20, qp21, qp22, qp23, qp24, qp25, qp26;
 qp30, qp31, qp32, qp33, qp34, qp35, qp36;
 qp40, qp41, qp42, qp43, qp44, qp45, qp46;
 qp50, qp51, qp52, qp53, qp54, qp55, qp56
];
QmL = [...
qm00, qm01, qm02, qm03, qm04, qm05;
 qm10, qm11, qm12, qm13, qm14, qm15;
 qm20, qm21, qm22, qm23, qm24, qm25;
 qm30, qm31, qm32, qm33, qm34, qm35;
 qm40, qm41, qm42, qm43, qm44, qm45;
 qm50, qm51, qm52, qm53, qm54, qm55;
 qm60, qm61, qm62, qm63, qm64, qm65
];

% Q+ and Q-
w = b; 
s = rot90(vander(1:w))\((0:(w-1)).*(w/2-1/2+1).^([0 0:w-2]))';  
Qp = spdiags(repmat(-s(end:-1:1)',[n+2 1]), -(w/2-1):w/2, n+2, n+2); 
Qm = spdiags(repmat(s(:)',[n+2 1]), -(w/2-1)-1:w/2-1, n+2, n+2);
Qp(end,:) = [];
Qm(:,end) = [];

% Add SBP boundary closures
Qp(1:b,1:b+1) = QpL;
Qp(end-b+1:end,end-b:end) = -fliplr(flipud(QpL));
Qm(1:b+1,1:b) = QmL;
Qm(end-b:end,end-b+1:end) = -fliplr(flipud(QmL));

% P+ and P-
Pp = ones(n+1,1);
Pm = ones(n+2,1);

Pp(1:b) = [pp0,  pp1,  pp2,  pp3,  pp4,  pp5]; 
Pp(end-b+1:end) = Pp(b:-1:1);
Pm(1:b+1) = [pm0,  pm1,  pm2,  pm3,  pm4,  pm5,  pm6];
Pm(end-b:end) = Pm(b+1:-1:1);
Pp = spdiags(Pp,0,n+1,n+1);
Pm = spdiags(Pm,0,n+2,n+2);

Pp = h*Pp;
Pm = h*Pm;

xp = h*[0:n]';
xm = h*[0 1/2+0:n n]';  
